// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Context;

public class UniversityContext : DbContext
{
    public virtual DbSet<Student> Students { get; set; }
    public virtual DbSet<Department> Departments { get; set; }
    public virtual DbSet<Course> Courses { get; set; }
    public virtual DbSet<Instructor> Instructors { get; set; }
    public virtual DbSet<StudentCourse> StudentCourses { get; set; }
    public virtual DbSet<InstructorCourse> InstructorCourses { get; set; }
    public virtual DbSet<Branch> Branches { get; set; }

    public UniversityContext(DbContextOptions dbContextOptions): base(dbContextOptions)
    {
        
    }

    public UniversityContext()
    {

    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        //optionsBuilder.UseSqlServer("Data Source =.; Initial Catalog = MVCProjectDB; Integrated Security = True; Encrypt = False");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Create StudentCourse Composite key 
        modelBuilder.Entity<StudentCourse>().HasKey(sc => new { sc.StudentId, sc.CourseId });

        // Create InstructorCourse Composite key 
        modelBuilder.Entity<InstructorCourse>().HasKey(ic => new { ic.CourseId , ic.InstructorId });

        #region Type Conversion
        // convertor between enum and string
        // c# --> enum 
        // DB ---> save as string 
        var converter = new ValueConverter<Branches, string>(toDB => toDB.ToString(), fromDB => (Branches)Enum.Parse(typeof(Branches), fromDB));

        modelBuilder.Entity<Branch>()
            .Property(b => b.BranchName)
            .HasConversion(converter);
        #endregion
    }

}